import { useState } from "react";
import Image from "next/image";
import Link from "next/link";
import ReactMarkdown from "react-markdown";



export default function AIChat() {
    const [messages, setMessages] = useState([]);  // –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    const [input, setInput] = useState("");         // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    const [loading, setLoading] = useState(false);  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

    const apiUrl = process.env.NEXT_PUBLIC_API_URL;

    const sendMessage = async () => {
        if (!input.trim()) {
            console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–ª —Ç–µ–∫—Å—Ç.");
            return;
        }
        
        console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", input);
        setLoading(true);
    
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
        const userMessage = { role: "user", text: input };
        setMessages((prev) => [...prev, userMessage]);
        
        try {
            console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
            const response = await fetch("/api/generate", {  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API —Ä–æ—É—Ç
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ prompt: input }),
            });
    
            console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω:", response);
    
            if (!response.ok) {
                console.error("–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.statusText);
                throw new Error(`HTTP –æ—à–∏–±–∫–∞! –°—Ç–∞—Ç—É—Å: ${response.status}`);
            }
    
            const data = await response.json();
            console.log("–î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞:", data);
    
            if (data && data.response) {
                const aiMessage = { role: "ai", text: data.response };
                setMessages((prev) => [...prev, aiMessage]);
            } else {
                console.warn("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'response':", data);
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç
                const errorMessage = { role: "ai", text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞." };
                setMessages((prev) => [...prev, errorMessage]);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç
            const errorMessage = { role: "ai", text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ." };
            setMessages((prev) => [...prev, errorMessage]);
        }
    
        setInput("");
        setLoading(false);

        const renderMessage = (msg) => {
            if (msg.role === "user") {
                return <div className="text-white">{msg.text}</div>;
            } else {
                return (
                    <ReactMarkdown
                        className="markdown-content text-gray-800"
                        components={{
                            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ markdown
                            h1: ({node, ...props}) => <h1 className="text-xl font-bold my-2" {...props} />,
                            h2: ({node, ...props}) => <h2 className="text-lg font-bold my-2" {...props} />,
                            h3: ({node, ...props}) => <h3 className="text-md font-bold my-1" {...props} />,
                            p: ({node, ...props}) => <p className="my-1" {...props} />,
                            ul: ({node, ...props}) => <ul className="list-disc pl-5 my-2" {...props} />,
                            ol: ({node, ...props}) => <ol className="list-decimal pl-5 my-2" {...props} />,
                            li: ({node, ...props}) => <li className="my-1" {...props} />,
                            a: ({node, ...props}) => <a className="text-blue-600 hover:underline" {...props} target="_blank" rel="noopener noreferrer" />,
                            code: ({node, inline, ...props}) => 
                                inline 
                                    ? <code className="bg-gray-100 px-1 rounded text-red-600" {...props} />
                                    : <code className="block bg-gray-100 p-2 rounded my-2 overflow-x-auto text-sm" {...props} />
                        }}
                    >
                        {msg.text}
                    </ReactMarkdown>
                );
            }
    
    };
    }

    return (
        <>
            {/* üîπ –•–µ–¥–µ—Ä */}
            <header className="bg-green-600 text-white py-4">
                <div className="max-w-7xl mx-auto flex justify-between items-center px-6">
                    {/* –õ–æ–≥–æ */}
                    <Link href="/">
                        <span className="text-2xl font-bold cursor-pointer">QUNAR.AI</span>
                    </Link>

                    {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
                    <nav className="hidden md:flex gap-6">
                        <Link href="/" className="hover:underline">–î–æ–º–æ–π</Link>
                        <Link href="/products" className="hover:underline">–ü—Ä–æ–¥—É–∫—Ç—ã</Link>
                        <Link href="/sustainability" className="hover:underline">–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å</Link>
                        <Link href="/about" className="hover:underline">–û –Ω–∞—Å</Link>
                    </nav>

                    {/* –ò–∫–æ–Ω–∫–∏ */}
                    <div className="flex gap-4">
                        <Link href="/busket">
                            üõí
                        </Link>
                        <Link href="/profile">
                            üë§
                        </Link>
                    </div>
                </div>
            </header>

            {/* üîπ –ß–∞—Ç AI */}
            <section className="h-screen flex flex-col justify-center items-center bg-white">
                <div className="text-center mb-6">
                    <h1 className="text-gray-600 text-lg mt-2">–≠—Ç–æ –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å</h1>
                    <h2 className="text-gray-800 text-2xl font-semibold">QUNAR.AI</h2>
                </div>

                {/* –û–∫–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π */}
                <div className="w-full max-w-3xl h-96 bg-gray-100 rounded-lg shadow-md overflow-y-auto p-4">
                    {messages.length === 0 ? (
                        <p className="text-gray-400 text-center">–ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...</p>
                    ) : (
                        messages.map((msg, index) => (
                            <div
                                key={index}
                                className={`mb-3 p-3 rounded-lg ${
                                    msg.role === "user" ? "bg-green-500 text-white self-end" : "bg-gray-200 text-gray-800"
                                }`}
                            >
                                {msg.text}
                            </div>
                        ))
                    )}
                    {loading && <p className="text-gray-400 text-center">–ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç...</p>}
                </div>

                {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
                <div className="mt-4 flex items-center w-full max-w-3xl">
                    <input
                        type="text"
                        className="flex-1 px-4 py-2 border-t border-b border-gray-300 focus:outline-none"
                        placeholder="–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        onKeyDown={(e) => e.key === "Enter" && sendMessage()}
                    />
                    <button
                        onClick={sendMessage}
                        className="px-4 py-2 border rounded-r-lg bg-green-500 text-white hover:bg-green-600"
                    >
                        ‚ñ∂Ô∏è
                    </button>
                </div>
            </section>
        </>
    );
}
